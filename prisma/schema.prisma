generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  phone          String           @unique
  password       String
  name           String
  role           Role             @default(CASHIER)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  lastLogin      DateTime?
  expenses       Expense[]
  purchases      Purchase[]
  sales          Sale[]
  activities     UserActivity[]
  purchaseOrders PurchaseOrder[]
  fraudReviews   FraudDetection[]
  notifications  Notification[]
  orderTrackings OrderTracking[]
}

model UserActivity {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  details   String?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  products              Product[]
  categoryPricingRules  CategoryPricingRule[]
  categoryDiscountRules CategoryDiscountRule[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  symbol    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String?
  sku                  String                @unique
  barcode              String                @unique
  categoryId           Int
  brandId              Int
  unitId               Int
  costPrice            Float
  sellingPrice         Float
  stock                Int                   @default(0)
  minStock             Int                   @default(10)
  expiryDate           DateTime?
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  brand                Brand                 @relation(fields: [brandId], references: [id])
  category             Category              @relation(fields: [categoryId], references: [id])
  unit                 Unit                  @relation(fields: [unitId], references: [id])
  purchaseItems        PurchaseItem[]
  saleItems            SaleItem[]
  purchaseOrderItems   PurchaseOrderItem[]
  warehouseStocks      WarehouseStock[]
  analytics            ProductAnalytics[]
  productPricingRules  ProductPricingRule[]
  productDiscountRules ProductDiscountRule[]
  vendorProducts       VendorProduct[]
}

model Customer {
  id                    Int                     @id @default(autoincrement())
  name                  String
  email                 String                  @unique
  phone                 String                  @unique
  address               String?
  loyaltyPoints         Int                     @default(0)
  creditLimit           Float                   @default(0)
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  sales                 Sale[]
  communications        CustomerCommunication[]
  segmentMembers        CustomerSegmentMember[]
  couponUsages          CouponUsage[]
  customerPricingRules  CustomerPricingRule[]
  customerDiscountRules CustomerDiscountRule[]
  notifications         Notification[]
  orderTrackings        OrderTracking[]
}

model Supplier {
  id             Int             @id @default(autoincrement())
  name           String
  contactPerson  String
  email          String          @unique
  phone          String
  address        String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  purchases      Purchase[]
  purchaseOrders PurchaseOrder[]
}

model Sale {
  id             Int             @id @default(autoincrement())
  userId         Int
  customerId     Int?
  invoiceNumber  String          @unique
  subtotal       Float
  taxAmount      Float           @default(0)
  discount       Float           @default(0)
  totalAmount    Float
  amountPaid     Float           @default(0)
  amountDue      Float           @default(0)
  paymentMethod  String?
  status         String          @default("completed")
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  customer       Customer?       @relation(fields: [customerId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  saleItems      SaleItem[]
  couponUsages   CouponUsage[]
  delivery       Delivery?
  fraudDetection FraudDetection?
  orderTracking  OrderTracking?
  commissions    Commission[]
}

model SaleItem {
  id         Int     @id @default(autoincrement())
  saleId     Int
  productId  Int
  quantity   Int
  unitPrice  Float
  totalPrice Float
  product    Product @relation(fields: [productId], references: [id])
  sale       Sale    @relation(fields: [saleId], references: [id])
}

model Purchase {
  id            Int            @id @default(autoincrement())
  supplierId    Int
  userId        Int
  invoiceNumber String         @unique
  subtotal      Float
  taxAmount     Float          @default(0)
  discount      Float          @default(0)
  totalAmount   Float
  amountPaid    Float          @default(0)
  amountDue     Float          @default(0)
  status        String         @default("pending")
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  supplier      Supplier       @relation(fields: [supplierId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  purchaseItems PurchaseItem[]
}

model PurchaseItem {
  id         Int      @id @default(autoincrement())
  purchaseId Int
  productId  Int
  quantity   Int
  unitPrice  Float
  totalPrice Float
  product    Product  @relation(fields: [productId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
}

model ExpenseCategory {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  Expense[]
}

model Expense {
  id          Int             @id @default(autoincrement())
  categoryId  Int
  userId      Int
  amount      Float
  description String?
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  user        User            @relation(fields: [userId], references: [id])
}

model PurchaseOrder {
  id                 Int                 @id @default(autoincrement())
  supplierId         Int
  userId             Int
  orderNumber        String              @unique
  status             String              @default("pending") // pending, approved, received, cancelled
  subtotal           Float
  taxAmount          Float               @default(0)
  discount           Float               @default(0)
  totalAmount        Float
  notes              String?
  expectedDate       DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  supplier           Supplier            @relation(fields: [supplierId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
  purchaseOrderItems PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              Int           @id @default(autoincrement())
  purchaseOrderId Int
  productId       Int
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQty     Int           @default(0)
  product         Product       @relation(fields: [productId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model Warehouse {
  id              Int              @id @default(autoincrement())
  name            String
  location        String
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  warehouseStocks WarehouseStock[]
}

model WarehouseStock {
  id          Int       @id @default(autoincrement())
  warehouseId Int
  productId   Int
  quantity    Int       @default(0)
  reserved    Int       @default(0) // Quantity reserved for orders
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@unique([warehouseId, productId])
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model Business {
  id             Int      @id @default(autoincrement())
  name           String
  email          String
  phone          String
  address        String
  taxRate        Float    @default(0)
  currency       String   @default("USD")
  receiptMessage String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CustomerCommunication {
  id         Int      @id @default(autoincrement())
  customerId Int
  type       String // email, sms, phone, in-person
  subject    String?
  content    String
  direction  String // inbound, outbound
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
}

model CustomerSegment {
  id                     Int                     @id @default(autoincrement())
  name                   String
  criteria               String // JSON string with segment criteria
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  customerSegmentMembers CustomerSegmentMember[]
}

model CustomerSegmentMember {
  id                Int             @id @default(autoincrement())
  customerSegmentId Int
  customerId        Int
  joinedAt          DateTime        @default(now())
  customerSegment   CustomerSegment @relation(fields: [customerSegmentId], references: [id])
  customer          Customer        @relation(fields: [customerId], references: [id])

  @@unique([customerSegmentId, customerId])
}

enum Role {
  ADMIN
  MANAGER
  CASHIER
  INVENTORY_STAFF
}

model Campaign {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  type           String // email, sms, push, banner
  status         String   @default("draft") // draft, active, paused, completed
  startDate      DateTime
  endDate        DateTime
  targetSegments String? // JSON array of segment IDs
  content        String // JSON with campaign content
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  coupons        Coupon[]
}

model Coupon {
  id                Int           @id @default(autoincrement())
  code              String        @unique
  name              String
  description       String?
  discountType      String // percentage, fixed_amount
  discountValue     Float
  minimumOrderValue Float?        @default(0)
  usageLimit        Int? // Maximum number of times this coupon can be used
  usedCount         Int           @default(0)
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  campaignId        Int?
  campaign          Campaign?     @relation(fields: [campaignId], references: [id])
  couponUsages      CouponUsage[]
}

model CouponUsage {
  id           Int           @id @default(autoincrement())
  couponId     Int
  customerId   Int
  orderId      Int?
  usedAt       DateTime      @default(now())
  coupon       Coupon        @relation(fields: [couponId], references: [id])
  customer     Customer      @relation(fields: [customerId], references: [id])
  order        Sale?         @relation(fields: [orderId], references: [id])
  discountRule DiscountRule? @relation(fields: [couponId], references: [id], map: "CouponUsage_discountRule_fkey")
}

model SalesAnalytics {
  id                Int      @id @default(autoincrement())
  date              DateTime
  totalSales        Float    @default(0)
  totalOrders       Int      @default(0)
  totalCustomers    Int      @default(0)
  averageOrderValue Float    @default(0)
  topProducts       String // JSON array of top selling products
  topCategories     String // JSON array of top selling categories
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CustomerAnalytics {
  id                  Int      @id @default(autoincrement())
  date                DateTime
  totalCustomers      Int      @default(0)
  newCustomers        Int      @default(0)
  returningCustomers  Int      @default(0)
  customerSegments    String // JSON with segment distribution
  topCustomerSegments String // JSON with top performing segments
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model ProductAnalytics {
  id            Int      @id @default(autoincrement())
  date          DateTime
  productId     Int
  productName   String
  totalSold     Int      @default(0)
  totalRevenue  Float    @default(0)
  stockTurnover Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id])
}

model Delivery {
  id                Int              @id @default(autoincrement())
  saleId            Int              @unique
  trackingNumber    String           @unique
  carrier           String
  status            String           @default("pending") // pending, shipped, in_transit, delivered, failed
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  shippingAddress   String
  shippingCost      Float            @default(0)
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  sale              Sale             @relation(fields: [saleId], references: [id])
  deliveryUpdates   DeliveryUpdate[]
}

model DeliveryUpdate {
  id         Int      @id @default(autoincrement())
  deliveryId Int
  status     String
  location   String?
  notes      String?
  timestamp  DateTime @default(now())
  delivery   Delivery @relation(fields: [deliveryId], references: [id])
}

model FraudDetection {
  id         Int       @id @default(autoincrement())
  saleId     Int       @unique
  riskScore  Float // 0-100
  flags      String // JSON array of fraud flags
  status     String    @default("pending") // pending, approved, rejected
  reviewedBy Int?
  reviewedAt DateTime?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  sale       Sale      @relation(fields: [saleId], references: [id])
  reviewer   User?     @relation(fields: [reviewedBy], references: [id])
}

model PricingRule {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String?
  type                 String // percentage, fixed_amount, bulk, tiered
  value                Float
  startDate            DateTime
  endDate              DateTime?
  isActive             Boolean               @default(true)
  priority             Int                   @default(0) // Higher number = higher priority
  conditions           String // JSON with rule conditions
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  productPricingRules  ProductPricingRule[]
  categoryPricingRules CategoryPricingRule[]
  customerPricingRules CustomerPricingRule[]
}

model ProductPricingRule {
  id            Int         @id @default(autoincrement())
  pricingRuleId Int
  productId     Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pricingRule   PricingRule @relation(fields: [pricingRuleId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])

  @@unique([pricingRuleId, productId])
}

model CategoryPricingRule {
  id            Int         @id @default(autoincrement())
  pricingRuleId Int
  categoryId    Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pricingRule   PricingRule @relation(fields: [pricingRuleId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])

  @@unique([pricingRuleId, categoryId])
}

model CustomerPricingRule {
  id            Int         @id @default(autoincrement())
  pricingRuleId Int
  customerId    Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pricingRule   PricingRule @relation(fields: [pricingRuleId], references: [id])
  customer      Customer    @relation(fields: [customerId], references: [id])

  @@unique([pricingRuleId, customerId])
}

model DiscountRule {
  id                    Int                    @id @default(autoincrement())
  name                  String
  description           String?
  type                  String // percentage, fixed_amount, buy_x_get_y
  value                 Float
  startDate             DateTime
  endDate               DateTime?
  isActive              Boolean                @default(true)
  priority              Int                    @default(0) // Higher number = higher priority
  conditions            String // JSON with discount conditions
  usageLimit            Int? // Maximum number of times this discount can be used
  usedCount             Int                    @default(0)
  couponCode            String?                @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  productDiscountRules  ProductDiscountRule[]
  categoryDiscountRules CategoryDiscountRule[]
  customerDiscountRules CustomerDiscountRule[]
  couponUsages          CouponUsage[]
}

model ProductDiscountRule {
  id             Int          @id @default(autoincrement())
  discountRuleId Int
  productId      Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  discountRule   DiscountRule @relation(fields: [discountRuleId], references: [id])
  product        Product      @relation(fields: [productId], references: [id])

  @@unique([discountRuleId, productId])
}

model CategoryDiscountRule {
  id             Int          @id @default(autoincrement())
  discountRuleId Int
  categoryId     Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  discountRule   DiscountRule @relation(fields: [discountRuleId], references: [id])
  category       Category     @relation(fields: [categoryId], references: [id])

  @@unique([discountRuleId, categoryId])
}

model CustomerDiscountRule {
  id             Int          @id @default(autoincrement())
  discountRuleId Int
  customerId     Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  discountRule   DiscountRule @relation(fields: [discountRuleId], references: [id])
  customer       Customer     @relation(fields: [customerId], references: [id])

  @@unique([discountRuleId, customerId])
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int?
  customerId  Int?
  vendorId    Int?
  type        String // order_status, low_stock, campaign, vendor_approval, etc.
  title       String
  message     String
  isRead      Boolean   @default(false)
  priority    Int       @default(0) // Higher number = higher priority
  relatedId   Int? // ID of related entity (order, product, etc.)
  relatedType String? // Type of related entity
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  vendor      Vendor?   @relation(fields: [vendorId], references: [id])
}

model OrderTracking {
  id                Int              @id @default(autoincrement())
  saleId            Int              @unique
  vendorId          Int?
  status            String // pending, confirmed, processing, shipped, delivered, cancelled
  location          String? // Current location of the order
  notes             String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  sale              Sale             @relation(fields: [saleId], references: [id])
  vendor            Vendor?          @relation(fields: [vendorId], references: [id])
  trackingUpdates   TrackingUpdate[]
  userId            Int?
  customerId        Int?
  user              User?            @relation(fields: [userId], references: [id])
  customer          Customer?        @relation(fields: [customerId], references: [id])
}

model TrackingUpdate {
  id              Int           @id @default(autoincrement())
  orderTrackingId Int
  status          String
  location        String?
  notes           String?
  timestamp       DateTime      @default(now())
  orderTracking   OrderTracking @relation(fields: [orderTrackingId], references: [id])
}

model EmailLog {
  id           Int       @id @default(autoincrement())
  to           String
  subject      String
  body         String
  status       String    @default("pending") // pending, sent, failed
  sentAt       DateTime?
  errorMessage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model SmsLog {
  id           Int       @id @default(autoincrement())
  to           String
  message      String
  status       String    @default("pending") // pending, sent, failed
  sentAt       DateTime?
  errorMessage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Vendor model for multi-vendor support
model Vendor {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  phone          String          @unique
  address        String?
  contactPerson  String
  commissionRate Float           @default(10) // Percentage commission
  isActive       Boolean         @default(true)
  isApproved     Boolean         @default(false)
  bankAccount    String?
  taxId          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  vendorProducts VendorProduct[]
  commissions    Commission[]
  notifications  Notification[]
  orderTrackings OrderTracking[]
}

// Junction table for vendor-specific products
model VendorProduct {
  id           Int      @id @default(autoincrement())
  vendorId     Int
  productId    Int
  costPrice    Float
  sellingPrice Float
  stock        Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  vendor       Vendor   @relation(fields: [vendorId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])

  @@unique([vendorId, productId])
}

// Commission tracking for vendor payments
model Commission {
  id            Int       @id @default(autoincrement())
  vendorId      Int
  saleId        Int?
  amount        Float
  status        String    @default("pending") // pending, paid, cancelled
  paymentDate   DateTime?
  transactionId String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  vendor        Vendor    @relation(fields: [vendorId], references: [id])
  sale          Sale?     @relation(fields: [saleId], references: [id])
}
